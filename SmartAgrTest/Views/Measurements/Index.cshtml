<div id="prependNewCardHere" class="row">
    <div class="col-xl-6 col-md-6 mb-4">
        <div id="appendNewCard" class="card shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters justify-content-center align-items-center h-100">
                    <div class="col-auto">
                        <i class="fas fa-plus fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
</div>

<script type="text/javascript">
    var cardCount = 0;
    var devices;
    var charts = [];
    $(document).ready(function () {
        getDevices();
    });

    $("#appendNewCard").hover(function () { $(this).addClass("bg-gray-100"); }, function () { $(this).removeClass("bg-gray-100"); });
    $("#appendNewCard").click(function (e) {
        $('<div class="col-xl-6 col-md-6 mb-4">' +
            '<div class="card shadow h-100 py-2">'+
                '<div id="card-'+(++cardCount)+'" class="card-body">' +
                '</div>'+
            '</div>'+
          '</div>').insertBefore($("#appendNewCard").parent());
        initializeMeasurementCard(cardCount);
    });

    function getDevices() {
        $.ajax({
            type: "POST",
            url: '/Devices/GetDevices',
            contentType: "application/json; charset=utf-8",
            success: function (result) {
                devices = result;
            }
        });
    };

    function findDeviceWithChipId(chipId) {
        if (devices != null) {
            for (var i = 0; i < devices.length; i++) {
                if (devices[i].ChipId === chipId) {
                    return devices[i];
                }
            }
        }
    };

    function initializeMeasurementCard(cardId) {
        $("#card-" + cardId).append('<div class="row">' +
                                        '<div class="col-md-4" style="display:table;">' +
                                            '<label>Cihaz</label>' +
                                            '<div class="dropdown mb-4">' +
                                                '<button class="btn btn-primary dropdown-toggle" type="button" id="dropdownSelectedDevice-' + cardCount + '" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>' +
                                                '<div class="dropdown-menu scrollable-menu animated--fade-in" id="dropdownDevices-' + cardCount + '" aria-labelledby="dropdownDevices-' + cardCount + '"></div>' +
                                            '</div>' +
                                        '</div>' +
                                        '<div class="col-md-4">'+
                                            '<label>Veri Tipi</label>' +
                                            '<div class="dropdown mb-4">' +
                                                '<button class="btn btn-primary dropdown-toggle" type="button" id="dropdownSelectedType-' + cardCount + '" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>' +
                                                '<div class="dropdown-menu scrollable-menu animated--fade-in" id="dropdownTypes-' + cardCount + '" aria-labelledby="dropdownMenuButton"></div>' +
                                            '</div>' +
                                        '</div>' +
                                        '<div class="col-md-3">' +
                                            '<label>Gruplandırma Ölçütü</label>' +
                                            '<div class="dropdown mb-4">' +
                                                '<button class="btn btn-primary dropdown-toggle" type="button" id="dropdownSelectedGroup-' + cardCount + '" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>' +
                                                '<div class="dropdown-menu scrollable-menu animated--fade-in" id="dropdownGroups-' + cardCount + '" aria-labelledby="dropdownMenuButton">' +
                                                    '<button class="dropdown-item" onclick="dropdownSelectGroup(0,' + cardCount + ')">Yok</button>' +
                                                    '<button class="dropdown-item" onclick="dropdownSelectGroup(1,' + cardCount + ')">Saat</button>' +
                                                    '<button class="dropdown-item" onclick="dropdownSelectGroup(2,' + cardCount + ')">Gün</button>' +
                                                    '<button class="dropdown-item" onclick="dropdownSelectGroup(3,' + cardCount + ')">Hafta</button>' +
                                                    '<button class="dropdown-item" onclick="dropdownSelectGroup(4,' + cardCount + ')">Ay</button>' +
                                                    '<button class="dropdown-item" onclick="dropdownSelectGroup(5,' + cardCount + ')">Yıl</button>' +
                                                '</div>' +
                                            '</div>' +
                                        '</div>' +
                                    '</div>' +
                                    '<div class="row">'+
                                        '<div class="col-md-6">' +
                                            '<label>Başlangıç Tarihi</label>' +
                                            '<div class="form-group">'+
                                                '<div class="input-group date" id="dateTimePickerFrom-'+cardId+'" data-target-input="nearest">' +
                                                    '<input type="text" class="form-control datetimepicker-input" data-target="#dateTimePickerFrom-' + cardId + '"/>' +
                                                    '<div class="input-group-append" data-target="#dateTimePickerFrom-' + cardId + '" data-toggle="datetimepicker">' +
                                                        '<div class="input-group-text"><i class="fa fa-calendar"></i></div>' +
                                                    '</div>'+
                                                '</div>'+
                                            '</div>'+
                                        '</div>' +
                                        '<div class="col-md-6">' +
                                            '<label>Bitiş Tarihi</label>' +
                                            '<div class="form-group">' +
                                                '<div class="input-group date" id="dateTimePickerTo-' + cardId + '" data-target-input="nearest">' +
                                                    '<input type="text" class="form-control datetimepicker-input" data-target="#dateTimePickerTo-' + cardId + '"/>' +
                                                    '<div class="input-group-append" data-target="#dateTimePickerTo-' + cardId + '" data-toggle="datetimepicker">' +
                                                        '<div class="input-group-text"><i class="fa fa-calendar"></i></div>' +
                                                    '</div>' +
                                                '</div>' +
                                            '</div>' +
                                        '</div>' +
                                    '</div>' +
                                    '<div class="row">'+
                                        '<div class="col-md-12">' +
                                            '<button class="btn btn-primary btn-icon-split w-100" onclick="initializeChart(' + cardId + ')">' +
                                                '<span class="icon text-white-50" style="background:none;">'+
                                                    '<i class="fas fa-paper-plane"></i>'+
                                                '</span>'+
                                                '<span class="text" style="padding-left:0px;">Getir</span>' +
                                            '</button>'+
                                        '</div>' +
                                    '</div>'+
                                    '<div class="row">' +
                                        //'<div class="col-md-12">' +
                                            '<canvas id="chart-' + cardId + '"></canvas>' +
                                        //'</div>'+
                                    '</div>');
        if (devices != null) {
            for (var i = 0; i < devices.length; i++) {
                if (devices[i].Type.TempSensor || devices[i].Type.MoisSensor) {
                    $("#dropdownDevices-" + cardCount).append('<button class="dropdown-item" onclick="dropdownselectDevice($(this),' + cardCount + ')" id="' + devices[i].ChipId + '">' + devices[i].ChipId + ' − ' + devices[i].Alias + '</button>');
                }
            }
        }
        $("#dateTimePickerFrom-" + cardId).datetimepicker({
            locale: 'tr',
            icons: {
                time: "far fa-clock"
            }
        });
        $("#dateTimePickerTo-" + cardId).datetimepicker({
            locale: 'tr',
            icons: {
                time: "far fa-clock"
            }
        });
        console.log(cardId);
    };

    function dropdownselectDevice(btn, cardId) {//0: temperature, 1: humidity, 2:moisture
        var selectedDevice = findDeviceWithChipId(btn[0].id);
        $("#dropdownSelectedDevice-" + cardId).empty();
        $("#dropdownSelectedDevice-" + cardId).append(selectedDevice.ChipId + " - " + selectedDevice.Alias);
        $("#dropdownSelectedType-" + cardId).empty();
        $("#dropdownTypes-" + cardId).empty();
        if (selectedDevice.Type.TempSensor) {
            $("#dropdownTypes-" + cardId).append('<button class="dropdown-item" onclick="dropdownSelectType(0,' + cardId + ')">Sıcaklık</button>');
            $("#dropdownTypes-" + cardId).append('<button class="dropdown-item" onclick="dropdownSelectType(1,' + cardId + ')">Nem</button>');
        }
        else if (selectedDevice.Type.MoisSensor) {
            $("#dropdownTypes-" + cardId).append('<button class="dropdown-item" onclick="dropdownSelectType(2,' + cardId + ')">Toprak Nemi</button>');
        }

        console.log(btn[0].id, cardId);
    };

    function dropdownSelectType(type, cardId) {
        $("#dropdownSelectedType-" + cardId).empty();
        if (type===0) {
            $("#dropdownSelectedType-" + cardId).append("Sıcaklık");
        }
        else if (type===1) {
            $("#dropdownSelectedType-" + cardId).append("Nem");
        }
        else if (type===2) {
            $("#dropdownSelectedType-" + cardId).append("Toprak Nemi");
        }
        
    };

    function dropdownSelectGroup(groupId, cardId) {//0:Yok, 1:Saat, 2:Gün, 3:Hafta, 4:Ay, 5:Yıl
        console.log(groupId, cardId);
        $("#dropdownSelectedGroup-" + cardId).empty();
        if (groupId == 0) {
            $("#dropdownSelectedGroup-" + cardId).append("Yok");
        }
        else if (groupId == 1) {
            $("#dropdownSelectedGroup-" + cardId).append("Saat");
        }
        else if (groupId == 2) {
            $("#dropdownSelectedGroup-" + cardId).append("Gün");
        }
        else if (groupId == 3) {
            $("#dropdownSelectedGroup-" + cardId).append("Hafta");
        }
        else if (groupId == 4) {
            $("#dropdownSelectedGroup-" + cardId).append("Ay");
        }
        else if (groupId == 5) {
            $("#dropdownSelectedGroup-" + cardId).append("Yıl");
        }
    };

    function initializeChart(cardId) {
        var deviceId = $("#dropdownSelectedDevice-" + cardId)[0].innerHTML.split('-')[0].trim();
        var from = $("#dateTimePickerFrom-" + cardId).datetimepicker('viewDate').toISOString();
        var to = $("#dateTimePickerTo-" + cardId).datetimepicker('viewDate').toISOString();
        var groupType = $("#dropdownSelectedGroup-" + cardId)[0].innerHTML.trim();
        var dataType = $("#dropdownSelectedType-"+cardId)[0].innerHTML.trim();
        console.log(deviceId, from, to);
        $.ajax({
            type: "POST",
            url: '/Measurements/GetMeasurementsBetweenDates',
            contentType: "application/json; charset=utf-8",
            data: '{ "chipId": "' + deviceId + '", "from":"' + from + '", "to":"' + to + '"}',
            dataType: "json",
            success: function (result) {
                groupResults(result,cardId,groupType,dataType);
            }
        });
    };

    function groupResults(result, cardId, groupType, dataType) {
        console.log("raw:", result);
        var dayGroups = _.groupBy(result, function (res) {
            if (groupType === "Saat") {
                return moment(res.DateTime.Now).startOf('hour').format();
            }
            else if (groupType === "Gün") {
                return moment(res.DateTime.Now).startOf('day').format();
            }
            else if (groupType === "Hafta") {
                return moment(res.DateTime.Now).startOf('isoWeek').format();
            }
            else if (groupType === "Ay") {
                return moment(res.DateTime.Now).startOf('month').format();
            }
            else if (groupType === "Yıl") {
                return moment(res.DateTime.Now).startOf('year').format();
            }
        });
        
        
        if (groupType != "Yok") {
            var result = _.map(dayGroups, function (group, date) {
                return {
                    date: date,
                    measurements: group
                }
            });
            if (dataType == "Sıcaklık") {
                for (var i = 0; i < result.length; i++) {
                    var sum = 0;
                    for (var j = 0; j < result[i].measurements.length; j++) {
                        sum += result[i].measurements[j].Temperature;
                    }
                    result[i].measurements = parseFloat((sum / result[i].measurements.length).toFixed(2));
                }
            }
            else if (dataType == "Nem") {
                for (var i = 0; i < result.length; i++) {
                    var sum = 0;
                    for (var j = 0; j < result[i].measurements.length; j++) {
                        sum += result[i].measurements[j].Humidity;
                    }
                    result[i].measurements = parseFloat((sum / result[i].measurements.length).toFixed(2));
                }
            }
            else if (dataType == "Toprak Nemi") {
                for (var i = 0; i < result.length; i++) {
                    var sum = 0;
                    for (var j = 0; j < result[i].measurements.length; j++) {
                        sum += result[i].measurements[j].Moisture;
                    }
                    result[i].measurements = parseFloat((sum / result[i].measurements.length).toFixed(2));
                }
            }
        }
        drawChart(result, cardId, groupType, dataType);
    };

    function drawChart(result, cardId, groupType, dataType) {
        console.log(result, cardId, groupType, dataType);
        var ctx = $('#chart-' + cardId);
        if (charts[cardId] != undefined || charts[cardId] != null) {
            charts[cardId].destroy();
        }
        var chartLabels=[];
        var chartData = [];
        var legendStr = "";
        var showX = true;
        var chartType = 'line';
        if (result.length>50) {
            showX = false;
        }
        else if (result.length == 1) {
            chartType = 'bar';
        }
        (dataType === "Sıcaklık") ? legendStr += "Sıcaklık Ortalaması" : "";
        (dataType === "Nem") ? legendStr += "Nem Ortalaması" : "";
        (dataType === "Toprak Nemi") ? legendStr += "Toprak Nemi Ortalaması" : "";
        if (groupType === "Saat") {
            legendStr = "Saatlik " + legendStr;
            for (var i = 0; i < result.length; i++) {
                chartLabels.push(moment(result[i].date).locale('tr').format('DD MMM - HH:mm'));
                chartData.push(result[i].measurements);
            }
        }
        else if (groupType === "Gün") {
            legendStr = "Günlük " + legendStr;
            for (var i = 0; i < result.length; i++) {
                chartLabels.push(moment(result[i].date).locale('tr').format('DD MMMM YYYY'));
                chartData.push(result[i].measurements);
            }
        }
        else if (groupType === "Hafta") {
            legendStr = "Haftalık " + legendStr;
            for (var i = 0; i < result.length; i++) {
                chartLabels.push(moment(result[i].date).locale('tr').format('DD MMMM YYYY'));
                chartData.push(result[i].measurements);
            }
        }
        else if (groupType === "Ay") {
            legendStr = "Aylık " + legendStr;
            for (var i = 0; i < result.length; i++) {
                chartLabels.push(moment(result[i].date).locale('tr').format('MMMM YYYY'));
                chartData.push(result[i].measurements);
            }
        }
        else if (groupType === "Yıl") {
            legendStr = "Yıllık " + legendStr;
            for (var i = 0; i < result.length; i++) {
                chartLabels.push(moment(result[i].date).locale('tr').format('YYYY'));
                chartData.push(result[i].measurements);
            }
        }
        else if (groupType === "Yok") {
            legendStr = dataType;
            for (var i = 0; i < result.length; i++) {
                chartLabels.push(moment(result[i].DateTime.Now).locale('tr').format('HH:mm:ss'));
                if (dataType === "Sıcaklık") {
                    
                    chartData.push(result[i].Temperature);
                }
                else if (dataType === "Nem") {
                    chartData.push(result[i].Humidity);
                }
                else if (dataType === "Toprak Nemi") {
                    chartData.push(result[i].Moisture);
                }
            }
        }
        
        charts[cardId] = new Chart(ctx, {
            type: chartType,
            data: {
                labels: chartLabels,
                datasets: [{
                    label: legendStr,
                    data: chartData,
                    backgroundColor: [
                        'rgba(78, 115, 223, 0.2)'
                    ],
                    borderColor: [
                        'rgba(78, 115, 223, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            display:showX,
                            autoSkip: false
                        }
                    }]
                }
            }
        });
    }
</script>